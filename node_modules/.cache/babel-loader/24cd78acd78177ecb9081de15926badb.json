{"ast":null,"code":"import _classCallCheck from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/Home/SensorHome.js\";\nimport React, { Component } from 'react';\nimport '../../App.css';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport MapContainer from '../Maps/MapContainer';\n\nvar SensorHome =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SensorHome, _Component);\n\n  function SensorHome(props) {\n    var _this;\n\n    _classCallCheck(this, SensorHome);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SensorHome).call(this, props));\n\n    _this.deletesensor = function (id, e) {\n      //prevent page from refresh\n      e.preventDefault();\n      console.log(id); //make a post request with the user data\n\n      var url = 'http://localhost:3001/deletesensor/';\n      var requesturl = url + id;\n      axios.delete(requesturl).then(function (response) {\n        console.log(\"Status Code : \", response.status); // console.log(\"Data: \" + response.data);\n        //  this.setState({\n        //      redirectVar : <Redirect to=\"/home\"/>\n        //  })          \n\n        window.location = \"/sensorhome/\" + _this.state.nodeid;\n      });\n    };\n\n    console.log(\"nodeid\" + props.location.pathname.substring(12));\n    _this.state = {\n      sensors: [],\n      nodeid: props.location.pathname.substring(12),\n      redirectVar: null\n    };\n    _this.deletesensor = _this.deletesensor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //get the nodes data from backend  \n\n\n  _createClass(SensorHome, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('http://localhost:3001/sensorhome/' + this.state.nodeid).then(function (response) {\n        //update the state with the response data\n        _this2.setState({\n          sensors: _this2.state.sensors.concat(response.data)\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var redirectLink; //iterate over nodes to create a table row\n\n      var details = this.state.sensors.map(function (sensor) {\n        if (sensor.sensortype === \"Temperature\") {\n          redirectLink = React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/graph/\".concat(sensor.sensorid),\n            className: \"btn btn-warning\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"Real-time Sensor Data\"));\n        } else if (sensor.sensortype === \"Humidity\") {\n          redirectLink = React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/humiditygraph/\".concat(sensor.sensorid),\n            className: \"btn btn-warning\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, \"Real-time Sensor Data\"));\n        } else if (sensor.sensortype === \"Wind\") {\n          redirectLink = React.createElement(\"td\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/windgraph/\".concat(sensor.sensorid),\n            className: \"btn btn-warning\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, \"Real-time Sensor Data\"));\n        }\n\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, sensor.sensorid), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, sensor.nodeid), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, sensor.sensortype), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, sensor.sensorstatus), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, sensor.installation_date), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/addsensor/\",\n          $nodeid: true,\n          className: \"btn btn-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \"Update\")), redirectLink, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: _this3.deletesensor.bind(_this3, sensor.sensorid),\n          value: sensor.sensorid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Delete\")));\n      }); //if not logged in go to login page\n\n      var redirectVar = null;\n      var str = this.state.nodeid; // if(!cookie.load('cookie')){\n      //     redirectVar = <Redirect to= \"/login\"/>\n      // }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.redirectVar, React.createElement(\"div\", {\n        className: \"container map-container col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Sensor List for Node ID \", str), React.createElement(\"table\", {\n        className: \"table table-striped\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Sensor ID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Node ID\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Sensor Type\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Sensor Status\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Installed On\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, details))));\n    }\n  }]);\n\n  return SensorHome;\n}(Component); //export Home Component\n\n\nexport default SensorHome;","map":{"version":3,"sources":["/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/Home/SensorHome.js"],"names":["React","Component","axios","cookie","Redirect","Link","MapContainer","SensorHome","props","deletesensor","id","e","preventDefault","console","log","url","requesturl","delete","then","response","status","window","location","state","nodeid","pathname","substring","sensors","redirectVar","bind","get","setState","concat","data","redirectLink","details","map","sensor","sensortype","sensorid","sensorstatus","installation_date","str"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../../App.css';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport {Redirect} from 'react-router';\nimport {Link} from 'react-router-dom';\n\nimport MapContainer from '../Maps/MapContainer';\n\nclass SensorHome extends Component {\n    constructor(props){\n        super(props);\n\t\tconsole.log(\"nodeid\" + props.location.pathname.substring(12))\n        this.state = {  \n            sensors : [],\n            nodeid : props.location.pathname.substring(12),\n            redirectVar: null\n        }\n         this.deletesensor = this.deletesensor.bind(this); \n    }  \n    //get the nodes data from backend  \n    componentDidMount(){\n        axios.get('http://localhost:3001/sensorhome/'+this.state.nodeid)\n                .then((response) => {\n                //update the state with the response data\n                this.setState({\n                    sensors : this.state.sensors.concat(response.data),\n                });\n            });\n    }\n\n\n    deletesensor = (id,e) => {\n        //prevent page from refresh\n        e.preventDefault();   \n        console.log(id);\n        //make a post request with the user data\n        var url = 'http://localhost:3001/deletesensor/'\n        var requesturl = url + id;\n        axios.delete(requesturl)\n            .then(response => {\n                console.log(\"Status Code : \",response.status);  \n                // console.log(\"Data: \" + response.data);\n                //  this.setState({\n                //      redirectVar : <Redirect to=\"/home\"/>\n                //  })          \n                  window.location = \"/sensorhome/\"+this.state.nodeid; \n            });         \n    }\n\n\n    render(){\n        let redirectLink;\n        //iterate over nodes to create a table row\n        let details = this.state.sensors.map(sensor => {\n            if(sensor.sensortype === \"Temperature\")\n            {\n                redirectLink = <td><Link to={`/graph/${sensor.sensorid}`} className = \"btn btn-warning\">Real-time Sensor Data</Link></td> \n            }\n            else if(sensor.sensortype === \"Humidity\")\n            {\n                redirectLink = <td><Link to={`/humiditygraph/${sensor.sensorid}`} className = \"btn btn-warning\">Real-time Sensor Data</Link></td> \n            }\n            else if(sensor.sensortype === \"Wind\")\n            {\n                redirectLink = <td><Link to={`/windgraph/${sensor.sensorid}`} className = \"btn btn-warning\">Real-time Sensor Data</Link></td> \n            }\n            return(\n                <tr>\n                    <td>{sensor.sensorid}</td>\n                    <td>{sensor.nodeid}</td>\n                    <td>{sensor.sensortype}</td>\n                    <td>{sensor.sensorstatus}</td> \n                    <td>{sensor.installation_date}</td>\n                    <td><Link to=\"/addsensor/\"$nodeid className = \"btn btn-info\">Update</Link></td> \n                    {redirectLink}\n                    <td><button className = \"btn btn-danger\" onClick={this.deletesensor.bind(this,sensor.sensorid)} value={sensor.sensorid}>Delete</button></td> \n                    \n\n                </tr>\n            )\n        })\n        //if not logged in go to login page\n        let redirectVar = null;\n        let str = this.state.nodeid;\n        // if(!cookie.load('cookie')){\n        //     redirectVar = <Redirect to= \"/login\"/>\n        // }\n        return(\n            <div>\n                {this.state.redirectVar}\n               \n                <div className=\"container map-container col\">\n                {/* <MapContainer/>  */}\n                </div>\n                <div className=\"container\">\n                    <h3>Sensor List for Node ID {str}</h3>\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Sensor ID</th>\n                                    <th>Node ID</th>\n                                    <th>Sensor Type</th>\n                                    <th>Sensor Status</th>\n                                    <th>Installed On</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {/*Display the Tbale row based on data recieved*/}\n                                {details}\n                            </tbody>\n                        </table>\n                </div> \n            </div> \n        )\n    }\n}\n//export Home Component\nexport default SensorHome;"]},"metadata":{},"sourceType":"module"}