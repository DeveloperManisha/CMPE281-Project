{"ast":null,"code":"import _defineProperty from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/AddSensor/AddSensor.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport MapContainer from '../Maps/MapContainer';\n\nvar AddSensor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddSensor, _Component);\n\n  //call the constructor method\n  function AddSensor(props) {\n    var _this;\n\n    _classCallCheck(this, AddSensor);\n\n    //Call the constrictor of Super class i.e The Component\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddSensor).call(this, props));\n\n    _this.SensorIDChangeHandler = function (e) {\n      _this.setState({\n        SensorID: e.target.value\n      });\n    };\n\n    _this.SensorTypeChangeHandler = function (e) {\n      _this.setState({\n        SensorType: e.target.value\n      });\n    };\n\n    _this.StatusChangeHandler = function (e) {\n      _this.setState({\n        Status: e.target.value\n      });\n    };\n\n    _this.InstallationDateChangeHandler = function (e) {\n      _this.setState({\n        InstallationDate: e.target.value\n      });\n    };\n\n    _this.NodeIDChangeHandler = function (e) {\n      _this.setState({\n        NodeID: e.target.value\n      });\n    };\n\n    _this.submitCreate = function (e) {\n      //var headers = new Headers();\n      //prevent page from refresh\n      e.preventDefault();\n      var data = {\n        sensorid: _this.state.SensorID,\n        sensortype: _this.state.SensorType,\n        sensorstatus: _this.state.Status,\n        // Frequency : this.state.Frequency,\n        installation_date: _this.state.InstallationDate,\n        nodeid: _this.state.NodeID\n      };\n      console.log(\"data in create\" + JSON.stringify(data)); //make a post request with the user data\n\n      axios.post('http://localhost:3001/addsensor', data).then(function (response) {\n        console.log(\"Status Code : \", response.status);\n        console.log(\"Data\", response.data);\n\n        _this.setState({\n          redirectVar: React.createElement(Redirect, {\n            to: \"/sensorhome/\".concat(response.data.nodeid),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          })\n        }); // if(response.data.sensortype === \"Temperature\")\n        // this.setState({\n        //     redirectVar : <Redirect to= \"/graph\"/>\n        // })\n        // else if(response.data.sensortype === \"Humidity\")\n        // this.setState({\n        //     redirectVar : <Redirect to= \"/humiditygraph\"/>\n        // })\n        // else if(response.data.sensortype === \"Wind\")\n        // this.setState({\n        //     redirectVar : <Redirect to= \"/windgraph\"/>\n        // })\n\n      });\n    };\n\n    _this.submitReset = function (e) {\n      //var headers = new Headers();\n      //prevent page from refresh\n      e.preventDefault();\n\n      _this.setState({\n        SensorID: '',\n        SensorType: '',\n        Latitude: '',\n        Longitude: '',\n        Status: '',\n        NodeID: '',\n        // Frequency : '',\n        InstallationDate: ''\n      });\n    };\n\n    var path = props.location.pathname;\n    var nodeid;\n    nodeid = path.substring(11); //maintain the state required for this component\n\n    _this.state = {\n      SensorID: '',\n      SensorType: '',\n      Status: '',\n      // Frequency : '',\n      InstallationDate: '',\n      NodeID: nodeid,\n      redirectVar: null //Bind the handlers to this class\n\n    };\n    _this.NodeIDChangeHandler = _this.NodeIDChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.SensorIDChangeHandler = _this.SensorIDChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.FrequencyChangeHandler = this.FrequencyChangeHandler.bind(this);\n\n    _this.SensorTypeChangeHandler = _this.SensorTypeChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.StatusChangeHandler = _this.StatusChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.InstallationDateChangeHandler = _this.InstallationDateChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submitCreate = _this.submitCreate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //node id change handler to update state variable with the text entered by the user\n\n\n  _createClass(AddSensor, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"create-wrapper-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"\\xA0\\xA0Configure your sensor\"), React.createElement(\"div\", {\n        className: \"container map-container col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container form-container col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.redirectVar, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          width: '60%'\n        },\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"SensorID\",\n        placeholder: \"Sensor ID\",\n        onChange: this.SensorIDChangeHandler,\n        value: this.state.SensorID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"div\", (_React$createElement = {\n        className: \"col-sm-12 col-md-7\",\n        style: {\n          width: '60%'\n        }\n      }, _defineProperty(_React$createElement, \"className\", \"form-group\"), _defineProperty(_React$createElement, \"onChange\", this.SensorTypeChangeHandler), _defineProperty(_React$createElement, \"value\", this.state.SensorType), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), React.createElement(\"select\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        disabled: \"\",\n        hidden: \"\",\n        value: \"\",\n        selected: \"selected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Sensor Type\"), React.createElement(\"option\", {\n        value: \"Temperature\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Temperature\"), React.createElement(\"option\", {\n        value: \"Humidity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Humidity\"), React.createElement(\"option\", {\n        value: \"Wind\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Wind Speed\")))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          width: '60%'\n        },\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"Status\",\n        placeholder: \"Active/Inactive/Maintenance\",\n        onChange: this.StatusChangeHandler,\n        value: this.state.Status,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          width: '60%'\n        },\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"date\",\n        className: \"form-control\",\n        name: \"InstallationDate\",\n        placeholder: \"Installation Date\",\n        onChange: this.InstallationDateChangeHandler,\n        value: this.state.InstallationDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          width: '60%'\n        },\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: \"NodeID\",\n        placeholder: \"Node ID\",\n        onChange: this.NodeIDChangeHandler,\n        value: this.state.NodeID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          width: '60%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.submitCreate,\n        className: \"btn btn-success\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Update Sensor\"), \" \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AddSensor;\n}(Component);\n\nexport default AddSensor;","map":{"version":3,"sources":["/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/AddSensor/AddSensor.js"],"names":["React","Component","axios","cookie","Redirect","Link","MapContainer","AddSensor","props","SensorIDChangeHandler","e","setState","SensorID","target","value","SensorTypeChangeHandler","SensorType","StatusChangeHandler","Status","InstallationDateChangeHandler","InstallationDate","NodeIDChangeHandler","NodeID","submitCreate","preventDefault","data","sensorid","state","sensortype","sensorstatus","installation_date","nodeid","console","log","JSON","stringify","post","then","response","status","redirectVar","submitReset","Latitude","Longitude","path","location","pathname","substring","bind","width"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport {Redirect} from 'react-router';\nimport {Link} from 'react-router-dom';\nimport MapContainer from '../Maps/MapContainer';\n\nclass AddSensor extends Component{\n\n        //call the constructor method\n        constructor(props){\n        //Call the constrictor of Super class i.e The Component\n        super(props);\n        var path = props.location.pathname;\n        var nodeid;\n        nodeid = path.substring(11)\n        //maintain the state required for this component\n        this.state = {\n            SensorID : '',\n            SensorType : '',\n            Status : '',\n            // Frequency : '',\n            InstallationDate : '',\n            NodeID : nodeid,\n            redirectVar:null\n        }\n        //Bind the handlers to this class\n        this.NodeIDChangeHandler  = this.NodeIDChangeHandler.bind(this);\n        this.SensorIDChangeHandler  = this.SensorIDChangeHandler.bind(this);\n        //this.FrequencyChangeHandler = this.FrequencyChangeHandler.bind(this);\n        this.SensorTypeChangeHandler = this.SensorTypeChangeHandler.bind(this);\n        this.StatusChangeHandler  = this.StatusChangeHandler.bind(this);\n        this.InstallationDateChangeHandler  = this.InstallationDateChangeHandler.bind(this);\n        this.submitCreate = this.submitCreate.bind(this);\n    }\n    //node id change handler to update state variable with the text entered by the user\n    SensorIDChangeHandler  = (e) => {\n        this.setState({\n            SensorID : e.target.value\n        })\n    }\n    SensorTypeChangeHandler  = (e) => {\n        this.setState({\n            SensorType : e.target.value\n        })\n    }\n    StatusChangeHandler  = (e) => {\n        this.setState({\n            Status : e.target.value\n        })\n    }\n\n    InstallationDateChangeHandler  = (e) => {\n        this.setState({\n            InstallationDate : e.target.value\n        })\n    }\n\n    //  FrequencyChangeHandler  = (e) => {\n    //      this.setState({\n    //          Frequency : e.target.value\n    //      })\n    //  }\n\n    NodeIDChangeHandler  = (e) => {\n        this.setState({\n            NodeID : e.target.value\n        })\n    }\n\n    //submit Login handler to send a request to the node backend\n    submitCreate = (e) => {\n        //var headers = new Headers();\n        //prevent page from refresh\n        e.preventDefault();\n        const data = {\n            sensorid : this.state.SensorID,\n            sensortype : this.state.SensorType,\n            sensorstatus : this.state.Status,\n            // Frequency : this.state.Frequency,\n            installation_date : this.state.InstallationDate,\n            nodeid : this.state.NodeID\n        }\n\n        console.log(\"data in create\" + JSON.stringify(data));\n        \n        //make a post request with the user data\n        axios.post('http://localhost:3001/addsensor',data)\n            .then(response => {\n                console.log(\"Status Code : \",response.status);\n                console.log(\"Data\", response.data);\n                this.setState({\n                    redirectVar : <Redirect to = {`/sensorhome/${response.data.nodeid}`}/>\n                })\n                // if(response.data.sensortype === \"Temperature\")\n                // this.setState({\n                //     redirectVar : <Redirect to= \"/graph\"/>\n                // })\n                // else if(response.data.sensortype === \"Humidity\")\n                // this.setState({\n                //     redirectVar : <Redirect to= \"/humiditygraph\"/>\n                // })\n                // else if(response.data.sensortype === \"Wind\")\n                // this.setState({\n                //     redirectVar : <Redirect to= \"/windgraph\"/>\n                // })\n            });\n            \n    }\n\n    submitReset = (e) => {\n        //var headers = new Headers();\n        //prevent page from refresh\n        e.preventDefault();\n        this.setState({\n            SensorID : '',\n            SensorType : '',\n            Latitude : '',\n            Longitude : '',\n            Status : '',\n            NodeID : '',\n            // Frequency : '',\n            InstallationDate : ''\n        }\n        );          \n    };\n\n    render(){\n        return(\n            <div>\n                <div className = \"create-wrapper-div\">\n                <h3>&nbsp;&nbsp;Configure your sensor</h3>\n                <div className=\"container map-container col\">\n                {/* <MapContainer example = \"foo\"/> */}\n                </div>\n                <br/>\n                <div className=\"container form-container col\">\n                \n                        {this.state.redirectVar}\n                        <form>\n                        <div>\n                         <div style={{width: '60%'}} className=\"form-group\">\n                            <input  type=\"text\" className=\"form-control\" name=\"SensorID\" placeholder=\"Sensor ID\" onChange={this.SensorIDChangeHandler} value={this.state.SensorID}/>\n                        </div> \n                        <br/>\n                       {/* <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"text\" className=\"form-control\" name=\"Latitude\" placeholder=\"Latitude\" onChange={this.LatitudeChangeHandler} value={this.state.Latitude}/>\n                        </div>\n                        <br/>\n                        <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"text\" className=\"form-control\" name=\"Longitude\" placeholder=\"Longitude\" onChange={this.LongitudeChangeHandler} value={this.state.Longitude}/>\n                        </div>\n                        <br/>  */}\n                        <div className=\"dropdown\">\n                        <div className=\"col-sm-12 col-md-7\" style={{width: '60%'}} className=\"form-group\" onChange = {this.SensorTypeChangeHandler} value={this.state.SensorType}>     \n                        <select className=\"form-control\">\n                                <option disabled=\"\" hidden=\"\" value=\"\" selected=\"selected\">Sensor Type</option>\n                                <option value=\"Temperature\">Temperature</option>\n                                <option value=\"Humidity\">Humidity</option>\n                                <option value=\"Wind\">Wind Speed</option>\n                        </select>\n                        </div>\n                        </div>\n                        <br/>\n                        {/* <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"select\" className=\"form-control\" name=\"NoSensors\" placeholder=\"No of sensors\" onChange={this.NoSensorsChangeHandler} value={this.state.NoSensors}/>\n                        </div>\n                        <br/> */}\n                        <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"text\" className=\"form-control\" name=\"Status\" placeholder=\"Active/Inactive/Maintenance\" onChange={this.StatusChangeHandler} value={this.state.Status}/>\n                        </div>\n                        <br/>\n                        <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"date\" className=\"form-control\" name=\"InstallationDate\" placeholder=\"Installation Date\" onChange={this.InstallationDateChangeHandler} value={this.state.InstallationDate}/>\n                        </div>\n                        <br/>\n                        <div style={{width: '60%'}} className=\"form-group\">\n                                <input  type=\"text\" className=\"form-control\" name=\"NodeID\" placeholder=\"Node ID\" onChange={this.NodeIDChangeHandler} value={this.state.NodeID}/>\n                        </div>\n                        <br/>\n                        <div style={{width: '60%'}}>\n                            <center><button onClick={this.submitCreate} className=\"btn btn-success\" type=\"submit\">Update Sensor</button> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</center>\n                        </div>\n\n                        </div>\n                        </form>\n\n                        <div>\n                            {/* <img src = {icon}></img> */}    \n                        </div> \n                    \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddSensor;"]},"metadata":{},"sourceType":"module"}