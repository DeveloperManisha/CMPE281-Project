{"ast":null,"code":"import _classCallCheck from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/Maps/ClusterMap.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\n\nvar fetch = require(\"isomorphic-fetch\");\n\nvar _require = require(\"recompose\"),\n    compose = _require.compose,\n    withProps = _require.withProps,\n    withHandlers = _require.withHandlers;\n\nvar _require2 = require(\"react-google-maps/lib/components/addons/MarkerClusterer\"),\n    MarkerClusterer = _require2.MarkerClusterer;\n\nvar MapWithAMarkerClusterer = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu0XOVNMFaA-JZj-OrOwF34i_AhmfR3CM&v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"450px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })\n}), withHandlers({\n  onMarkerClustererClick: function onMarkerClustererClick() {\n    return function (markerClusterer) {\n      var clickedMarkers = markerClusterer.getMarkers();\n      console.log(\"Current clicked markers length: \".concat(clickedMarkers.length));\n      console.log(clickedMarkers);\n    };\n  }\n}), withScriptjs, withGoogleMap)(function (props) {\n  return React.createElement(GoogleMap, {\n    defaultZoom: 7,\n    defaultCenter: {\n      lat: 37.33,\n      lng: -121.88\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(MarkerClusterer, {\n    onClick: props.onMarkerClustererClick,\n    averageCenter: true,\n    enableRetinaIcons: true,\n    gridSize: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, props.markers.map(function (marker) {\n    return React.createElement(Marker, {\n      key: marker.nodeid,\n      position: {\n        lat: parseFloat(marker.lat),\n        lng: parseFloat(marker.long)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  })));\n});\n\nvar ClusterMap =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ClusterMap, _React$PureComponent);\n\n  function ClusterMap() {\n    _classCallCheck(this, ClusterMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ClusterMap).apply(this, arguments));\n  }\n\n  _createClass(ClusterMap, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        markers: []\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      // const url = [\n      //   // Length issue\n      //   `https://gist.githubusercontent.com`,\n      //   `/farrrr/dfda7dd7fccfec5474d3`,\n      //   `/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`\n      // ].join(\"\")\n      // fetch(url)\n      //   .then(res => res.json())\n      //   .then(data => {\n      //     this.setState({ markers: data.photos });\n      //   });\n      axios.get('http://localhost:3001/home').then(function (response) {\n        //update the state with the response data\n        _this.setState({\n          markers: _this.state.markers.concat(response.data)\n        });\n\n        console.log(\"m\" + JSON.stringify(_this.state.markers));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(MapWithAMarkerClusterer, {\n        markers: this.state.markers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }) // <p>hello</p>\n      ;\n    }\n  }]);\n\n  return ClusterMap;\n}(React.PureComponent); //<ClusterMap />\n\n\nexport default ClusterMap;","map":{"version":3,"sources":["/Users/manishashivshette/Documents/ManishaStudies/CMPE281/CMPE281-Project/src/components/Maps/ClusterMap.js"],"names":["React","axios","withScriptjs","withGoogleMap","GoogleMap","Marker","fetch","require","compose","withProps","withHandlers","MarkerClusterer","MapWithAMarkerClusterer","googleMapURL","loadingElement","height","containerElement","mapElement","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","console","log","length","props","lat","lng","markers","map","marker","nodeid","parseFloat","long","ClusterMap","setState","get","then","response","state","concat","data","JSON","stringify","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n  } from 'react-google-maps';\n\nconst fetch = require(\"isomorphic-fetch\");\nconst { compose, withProps, withHandlers } = require(\"recompose\");\n\nconst { MarkerClusterer } = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\n\nconst MapWithAMarkerClusterer = compose(\n  withProps({\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDu0XOVNMFaA-JZj-OrOwF34i_AhmfR3CM&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `450px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withHandlers({\n    onMarkerClustererClick: () => (markerClusterer) => {\n      const clickedMarkers = markerClusterer.getMarkers()\n      console.log(`Current clicked markers length: ${clickedMarkers.length}`)\n      console.log(clickedMarkers)\n    },\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props =>\n  <GoogleMap\n    defaultZoom={7}\n    defaultCenter={{ lat: 37.33, lng: -121.88 }}\n  >\n    <MarkerClusterer\n      onClick={props.onMarkerClustererClick}\n      averageCenter\n      enableRetinaIcons\n      gridSize={60}\n    >\n      {props.markers.map(marker => (\n        <Marker\n          key={marker.nodeid}\n          position={{ lat: parseFloat(marker.lat), lng: parseFloat(marker.long) }}\n        />\n      ))}\n    </MarkerClusterer>\n  </GoogleMap>\n);\n\nclass ClusterMap extends React.PureComponent {\n  componentWillMount() {\n    this.setState({ markers: [] })\n  }\n\n  componentDidMount() {\n    // const url = [\n    //   // Length issue\n    //   `https://gist.githubusercontent.com`,\n    //   `/farrrr/dfda7dd7fccfec5474d3`,\n    //   `/raw/758852bbc1979f6c4522ab4e92d1c92cba8fb0dc/data.json`\n    // ].join(\"\")\n\n    // fetch(url)\n    //   .then(res => res.json())\n    //   .then(data => {\n    //     this.setState({ markers: data.photos });\n    //   });\n\n      axios.get('http://localhost:3001/home')\n      .then((response) => {\n      //update the state with the response data\n      this.setState({\n          markers : this.state.markers.concat(response.data)\n      });\n      console.log(\"m\" + JSON.stringify(this.state.markers))\n  });\n  }\n\n  render() {\n    return (\n       <MapWithAMarkerClusterer markers={this.state.markers} />\n    // <p>hello</p>\n    )\n  }\n}\n\n//<ClusterMap />\n\n\n\nexport default ClusterMap;\n"]},"metadata":{},"sourceType":"module"}